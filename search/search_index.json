{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This add-on will retrieve your activities and second-by-second heart rate, cadence, power and more from Strava for easy analysis in Splunk. It allows you to not only view your own data, but you can add your friends or co-workers as well for some healthy competition.</p> <p>You can get the app on Splunkbase.</p> <p>For feedback or any issues you encounter, please head to the repo on Github. </p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":"<p>If you haven\u2019t done so, first you will have to create an app on Strava. This allows Splunk to interact with the Strava API.</p> <p>Steps</p> <ol> <li>Go to https://www.strava.com/settings/api.</li> <li> <p>Create an application, use details that are relevant to you. If you\u2019re hosting this app for use by others, you might want to use your own domain for the <code>Authorization Callback Domain</code>, if it\u2019s for personal or family use you can stick with <code>localhost</code> like in the example below.</p> <p></p> </li> <li> <p>Click <code>Create</code> and add an icon.</p> </li> <li> <p>Once you\u2019ve created the app, you\u2019ll see the details on the next page. The <code>Client ID</code> is the ID of your app and can be shared with others in case you want to collect their data as well (more about that in the next step), the <code>Client Secret</code> is required for Splunk to get the data but outside of that it should never be shared with anyone. Make note of the rate limit, which you most likely hit the first time you start importing all your activities which might cause initial download of the activities to be slow.</p> <p></p> </li> <li> <p>With the Strava API Application created you\u2019re all set. Keep this tab open as we need the <code>Client ID</code> and <code>Client Secret</code>, now head over to Splunk and install the Strava Add-On for Splunk there.</p> </li> </ol>"},{"location":"integrations/","title":"Knowledge objects & integrations","text":""},{"location":"integrations/#sourcetypes","title":"Sourcetypes","text":"<ol> <li><code>strava:activities</code> contains the summary data for all activities in JSON format.</li> <li><code>strava:activities:stream</code> contains the second-by-second data for an activity, including altitude, lat/long coordinates, heartrate, power, cadence, temperature and speed if the respective sensor data is present.</li> </ol>"},{"location":"integrations/#field-aliases","title":"Field Aliases","text":"<p>The TA creates two aliases for the <code>id</code> field in the sourcetype <code>strava:activities</code>:</p> <ol> <li><code>strava_id</code></li> <li><code>activity_id</code></li> </ol>"},{"location":"integrations/#lookups","title":"Lookups","text":"<p>The TA uses three lookups:</p> <ol> <li><code>strava_athlete</code> (KV Store lookup) contains the <code>firstname</code>, <code>lastname</code>, <code>fullname</code>, <code>ftp</code> and <code>weight</code> fields. For getting the latter two metrics, make sure that the scope of the initial request for an access code from Strava includes the <code>profile:read_all</code> permission, e.g. like <code>scope=activity:read_all,profile:read_all</code> otherwise you would only get the name.</li> <li><code>strava_segments</code> (KV Store lookup) contains all segments and their details, along with a total amount of times the segment has been ridden. It gets populated by a scheduled search daily at 3am.</li> <li><code>strava_types</code> (CSV lookup) contains a list of all Strava activity types, pretty-printing the sport\u2019s name. For example <code>VirtualRide</code> becomes <code>Virtual Ride</code>, <code>VirtualRun</code> becomes <code>Virtual Run</code> etc, automatically added to a <code>type_full</code> field. This is an automatic lookup.</li> </ol>"},{"location":"integrations/#macros","title":"Macros","text":"<p>The TA has one macro: <code>strava_index</code>, which is set to <code>index=strava</code> by default.</p>"},{"location":"integrations/#garmin-add-on-for-splunk-integration","title":"Garmin Add-On for Splunk integration","text":"<p>The TA will automatically extract the Garmin Connect activity ID as the <code>garminActivityId</code> field. This makes it easy to correlate data from Garmin and Strava activities when using the Garmin Add-On for Splunk.</p>"},{"location":"multiple-athletes/","title":"Multiple athletes","text":"<p>Version 2.0 added support for multiple athletes, which allows you to build dashboards or leaderboards and compare yourself against others. Fortunately it\u2019s very easy to setup:</p> <ol> <li>The Splunk Admin is the only one that has to create an app, as per the steps in Getting Started.</li> <li>The Splunk Admin then configures the <code>Client ID</code> and <code>Client Secret</code> in the Strava for Splunk app.</li> <li>To each athlete they want to get the data from, the Splunk Admin sends the OAuth link, e.g. https://www.strava.com/oauth/authorize?client_id=123456890&amp;redirect_uri=http://localhost&amp;response_type=code&amp;scope=activity:read_all,profile:read_all. Make sure to change the Client ID to the one configured in step 2.</li> <li>Once the user authorizes your app to read their data, they are presented with a URL with an access code. They will have to send the Splunk Admin the access code, or add it themselves as an input as described in the Setup section if they have those permissions.</li> <li>You\u2019re all set!</li> </ol> <p>NOTE:  In the example above, the redirect URL is set to <code>localhost</code> meaning that a user going to that URL will only see the code in his own browser\u2019s address bar. If you create a web page or service to automatically capture this for a better user experience, make sure to change the <code>redirect_url</code> and <code>Authorization Callback Domain</code> in the Strava API settings page to reflect that.</p>"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#320","title":"3.2.0","text":"<ul> <li>Moved OAuth details from KV Store to Splunk secrets.</li> <li>Changed GET requests to use header authentication when communicating with Strava.</li> </ul>"},{"location":"release-notes/#311","title":"3.1.1","text":"<ul> <li>Updated <code>strava_segments</code> lookup after changes made by the Strava API.</li> <li>Fixed issue with webhook not loading properly.</li> <li>Updated documentation and dashboard to add \u2018Powered by Strava\u2019 and comply with their new API guidelines.</li> </ul>"},{"location":"release-notes/#310","title":"3.1.0","text":"<ul> <li>Added a custom command <code>weather</code> in order to get a 3-hour weather report for a location. Returns coordinates, weather description, temperature and wind degrees &amp; speed. Requires an OpenWeatherMap API key to be added under Configuration -&gt; Add-On Settings.</li> <li>Added a panel in the Sample Dashboard to leverage the <code>weather</code> command, showing which completed segments within ~5 miles/~8 kilometres currently have a tailwind.</li> <li>Added a <code>strava_segments</code> KV Store lookup with details of each segment, along with a total count of each segment and the direction of the segment (text and degrees). A saved search populates the lookup daily at 3am.</li> <li>Removed deprecated references to TCX files in sample dashboard and replaced it with code based on <code>strava:activities:stream</code> sourcetype.</li> <li>Migrated the app to Splunk\u2019s UCC Framework.</li> <li>Updated logos to high-res versions.</li> </ul>"},{"location":"release-notes/#302","title":"3.0.2","text":"<ul> <li>Added <code>fullname</code> to <code>strava_athlete</code> KV Store lookup and made it an automatic lookup, adding the <code>firstname, lastname, fullname</code> fields.</li> <li>Added <code>strava_types.csv</code> CSV lookup (automatic) for prettier activity types, e.g. the <code>VirtualRide</code> type becomes <code>Virtual Ride</code> using a new <code>type_full</code> field for backwards-compatibility.</li> <li>Added <code>strava_index</code> macro, which is set to <code>index=strava</code> by default.</li> <li>Updated the Sample Dashboard to improve search efficiency.</li> </ul>"},{"location":"release-notes/#301","title":"3.0.1","text":"<ul> <li>Added support for activities of up to 9125 days old (~25 years).</li> <li>Updated TLS handling of webhook.</li> <li>Cleaned up README and moved documentation to https://bakermat.github.io/TA-strava-for-splunk.</li> </ul>"},{"location":"release-notes/#300","title":"3.0.0","text":"<ul> <li>Added support for activity streams, which allow for second-by-second analysis of all sensor data in an activity (time, distance, heart rate, power, altitude and more). Requires reindexing data if you want it for activities already in Splunk.</li> <li>Removed support for undocumented feature to retrieve raw workout files in favour of the stream support for a universal approach.</li> <li>Improved documentation and logging for the webhook input.</li> <li>Removed hardcoded host and source inputs to comply with best practices.</li> <li>Improved Strava API rate limit handling.</li> <li>Python 3 only version, so only supported on Splunk Enterprise 8.0 or later.</li> <li>Minor bug fixes &amp; some code clean-up.</li> </ul>"},{"location":"release-notes/#260","title":"2.6.0","text":"<ul> <li>Added \u2018strava_athlete\u2019 lookup table to store athlete id, firstname, lastname, ftp and weight.  By default the lookup table will be populated with athlete ID, firstname and lastname. To get FTP and weight, you will have to get a new access token as it requires additional Strava\u2019s permissions (<code>profile:read_all</code>).</li> </ul>"},{"location":"release-notes/#253","title":"2.5.3","text":"<ul> <li>Include efforts for hidden segments when downloading detailed activity.</li> </ul>"},{"location":"release-notes/#252","title":"2.5.2","text":"<ul> <li>Added option to reindex data from certain timestamp onwards.</li> <li>Added <code>garminActivityId</code> field extraction to assist with mapping Garmin Connect workout with Strava activity.</li> <li>Added <code>strava_id</code> field alias</li> </ul>"},{"location":"release-notes/#251","title":"2.5.1","text":"<ul> <li>Removed invalid validation check from 2.5.0, which prevented new installations from working correctly.</li> </ul>"},{"location":"release-notes/#250","title":"2.5.0","text":"<ul> <li>Added support for webhooks to get notified immediately if activity has been created or modified.</li> <li>UI changes to reduce clutter and align with Splunk\u2019s new UI.</li> <li>Simplified code to reduce complexity.</li> </ul>"},{"location":"release-notes/#215","title":"2.1.5","text":"<ul> <li>Minor fix to speed up Strava token refresh after expiry.</li> </ul>"},{"location":"release-notes/#214","title":"2.1.4","text":"<ul> <li>Added check to skip invalid or corrupt activities that get returned from the API.</li> </ul>"},{"location":"release-notes/#213","title":"2.1.3","text":"<ul> <li>Added support for multiple Strava accounts. Please read the details page before upgrading from 1.x as additional steps are required to avoid reingesting events already in Splunk.</li> <li>Improved error messages in case of Strava authentication failures.</li> </ul>"},{"location":"release-notes/#126","title":"1.2.6","text":"<ul> <li>Added check to skip invalid or corrupt activities that get returned from the API.</li> </ul>"},{"location":"release-notes/#125","title":"1.2.5","text":"<ul> <li>Made script compatible again with Python 2 &amp; 3, after previous release used a module that was Python 3 only.</li> </ul>"},{"location":"release-notes/#124a","title":"1.2.4a","text":"<ul> <li>Fixed issue where an empty timestamp string and timezone/DST mismatch could result in duplicate events.</li> </ul>"},{"location":"release-notes/#123","title":"1.2.3","text":"<ul> <li>Cosmetic update to make certain fields required at initial setup.</li> </ul>"},{"location":"release-notes/#122","title":"1.2.2","text":"<ul> <li>Fixed issue causing duplicate events when server timezone not set to GMT/UTC.</li> </ul>"},{"location":"release-notes/#120","title":"1.2.0","text":"<ul> <li>Fixed issue that would cause certain events to get indexed twice.</li> </ul>"},{"location":"release-notes/#113","title":"1.1.3","text":"<ul> <li>Minor bugfixes.</li> </ul>"},{"location":"release-notes/#112","title":"1.1.2","text":"<ul> <li>Minor bugfixes.</li> </ul>"},{"location":"release-notes/#111","title":"1.1.1","text":"<ul> <li>Compatible with Python 2 &amp; 3</li> </ul>"},{"location":"release-notes/#10","title":"1.0","text":"<ul> <li>Added support for retrieving all activities, instead of maximum 200 in earlier versions.</li> <li>Added support for activities older than 2,000 days.</li> <li>Improved Strava API rate limiting support (max. 600 requests/15 minutes or 30,000/day)</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#data-older-than-6-years-disappears","title":"Data older than 6 years disappears","text":"<p>Your data is likely frozen, as your index is probably set to the default of 6 years retention. To specify the age at which data freezes, edit the <code>frozenTimePeriodInSecs</code> attribute in indexes.conf. This attribute specifies the number of seconds to elapse before data gets frozen. The default value is 188697600 seconds, or approximately 6 years. To change it to 25 years, use the example below:</p> <pre><code>[strava]\nfrozenTimePeriodInSecs = 788400000\n</code></pre>"},{"location":"troubleshooting/#viewing-logs","title":"Viewing logs","text":"<p>If you want to troubleshoot you can check the logs:</p> <ol> <li>In Splunk: <code>index=_internal sourcetype=\"tastravaforsplunk:log\"</code></li> <li>On the CLI: <code>$SPLUNK_HOME/var/log/splunk/ta_strava_for_splunk_strava_api.log</code></li> </ol>"},{"location":"troubleshooting/#invalid-or-expired-access-code","title":"Invalid or expired access code","text":"<p>The most common issue is that the access code is invalid or has expired. To solve this, request a new access code using <code>https://www.strava.com/oauth/authorize?client_id=[client_id]&amp;redirect_uri=http://localhost&amp;response_type=code&amp;scope=activity:read_all,profile:read_all</code> and replace <code>[client_id]</code> with your Client ID. Alternatively, make sure that your Client ID and Client Secret have been set correctly, before you make the change as each access code is only valid once.</p>"},{"location":"troubleshooting/#reindexing-data","title":"Reindexing data","text":"<p>If you want to reindex events, you can either delete the input and create another one with a different name (important!) or edit the current one and select the \u2018Reindex data\u2019 checkbox, which will reindex the data from the specified starting time.</p>"},{"location":"troubleshooting/#fields-with-encrypted-values-are-shown-as-empty-after-reviewing-them","title":"Fields with encrypted values are shown as empty after reviewing them.","text":"<p>This is expected behaviour since 3.1.0 and is due to moving to Splunk\u2019s UCC framework. The values are saved correctly, just not shown back to a user at all using asterisks like it was in previous versions. The latter had the undesired effect that any secret was replaced with asterisks if the field wasn\u2019t updated.</p>"},{"location":"setup/activities/","title":"Activities","text":"<p>Next add the Strava athlete whose activities need to be retrieved. In the Inputs tab, click on <code>Create New Input</code> -&gt; <code>Strava Activities</code>.</p> <p>NOTE:  Strava Athlete is probably a more accurate definition of the input, as you would have to create one input per athlete you want to add.</p> <p></p> <p>Add the details of the athlete you want to add. </p> <ul> <li>Name: Name of the input, which will be reflected in the event source (e.g. <code>strava_api://bakermat</code> in the example above).</li> <li>Interval: Interval (in seconds) in which the Strava API is being queried for new data, in this example every hour.</li> <li>Index: Index that data is sent to.</li> <li>Access Code: Each athlete will have their own access code, which ties the app you created in Getting Started to this athlete. To get that access code, make sure the athlete whose activities you want to capture, goes to https://www.strava.com/oauth/authorize?client_id=[client_id]&amp;redirect_uri=http://localhost&amp;response_type=code&amp;scope=activity:read_all,profile:read_all. Make sure to replace <code>[client_id]</code> with the <code>Client ID</code> for your app as created in the Getting Started section. They will have to click on <code>Authorize</code> in the pop-up.</li> <li>Start Time: (Optional) If you don\u2019t want to index all activities but only activities from a certain date onwards, put in the epoch timestamp here. You can get the timestamp from epochconverter.com for example.</li> <li>Reindex Data: (Optional) If you want to reindex this athlete\u2019s activities, tick this box. If <code>Start Time</code> is left, all data will be retrieved. Use with caution, as it might result in duplicate events.</li> </ul>"},{"location":"setup/configuration/","title":"Configuration","text":"<p>Once the Strava Add-On for Splunk is installed, open it. First we have to setup a \u2018global\u2019 parameter, which only has to be done once. In the fields here, use the <code>Client ID</code> and <code>Client Secret</code> settings from the Strava API Application page so the app can authenticate with Strava.</p> <p>If you want to leverage weather information from OpenWeatherMap, fill in your OpenWeatherMap API key here.</p> <p></p> <p>In the Logging tab, you can select the level of logging. This is set to <code>INFO</code> by default and only needs to be changed in case of troubleshooting and more verbose logs are desired.</p>"},{"location":"setup/webhook/","title":"Webhook","text":"<p>If you have multiple users, you might hit Strava\u2019s API rate limits. If this happens regularly, it might be worthwhile setting up a webhook. That way every time an athlete uploads an activity to Strava, the webhook gets notified and immediately retrieves the activity instead of having to wait till the next interval configured in the Strava Activities input which is a great benefit as well.</p> <p>One thing to note is that it\u2019s important to understand how webhooks work. Every change to an activity will also trigger the webhook to retrieve the changed activity. Consider this common workflow for example:</p> <ol> <li>Athlete uploads ride to Strava, it\u2019s automatically named <code>Morning Ride</code>.</li> <li>Athlete then changes the name to <code>Cycle around the park</code> and saves the activity.</li> <li>Athlete then adds photos to ride and saves the activity again.</li> </ol> <p>In the case above, the webhook will be notified 3 times about the same activity and retrieve it 3 times. In Splunk you will have to cater for this and for example make use of the <code>dedup</code> command to make sure only the activity that was last retrieved is taken into account.</p> <p>Setting a webhook is optional and only one webhook per app is necessary.</p> <p>NOTE:  The webhook functionality will spawn a basic webserver on the port you specify. Make sure you understand the security implications before enabling this functionality.</p> <p></p> <ul> <li>Name: Name of the input.</li> <li>Interval: You can fill in anything here, it\u2019s not relevant as the webhook is constantly active.</li> <li>Index: Index that data is sent to.</li> <li>Port: Port the webserver will listen to, this has to be a port that\u2019s not in use yet.</li> <li>Verify Token: Token to verify that it\u2019s a valid request.</li> <li>Callback URL: The URL of your webserver, which will have to match what you submit to Strava.</li> <li>Cert file: The path to the TLS certificate. Strava requires this to be a certificate that\u2019s signed by a public CA, a self-signed certificate is not allowed.</li> <li>Key file: The path to your private key for the certificate above.</li> </ul> <p>Once you\u2019ve configured the webserver you will have to tell Strava what the address is of your webhook. Details on how to do that can be found on their Webhook Events API developer page.</p>"}]}